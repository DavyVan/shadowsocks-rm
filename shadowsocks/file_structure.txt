# servers.py (not server.py)
########################################
ss服务器从这里启动，执行main()函数，启动两个线程：一个运行manager；一个运行DbTransfer，然后就死循环睡眠了

# config.py
########################################
保存的是各种配置参数，包括数据库、管理服务器、本地绑定、日志

# manager.py
########################################
运行模式：将自己注册在一个事件队列里，由事件驱动运行
定义的操作包括添加端口、删除端口等，是执行管理命令的模块

# eventloop.py
########################################
定义事件队列的行为，还没太看懂

# daemon.py
########################################
守护进程操作，start、stop、restart等命令在这里实现，在local与server中被调用，但调用机制未知

# common.py
########################################
各种工具函数，大部分是解析IP报文相关的

# dbtransfer.py
########################################
ss服务器的用户数据是根据数据库的数据来配置的，由servers.py在启动时开启一个线程来每隔15秒检查一次数据库（Line：141）
他根据数据库的结果发出管理命令，需要搞明白那个MANAGE_IP指的是什么服务器
所以我们如果加入自己的管理机制的话我们主要关注的应该是这个类和manager

# local.py
########################################
ss客户端

# server.py
########################################
没看懂，这个和manager中add_port函数功能有什么不同？



# 其他不重要文件
########################################
encrypt.py: 加密方法
lru_cache.py: LRU缓存实现（什么鬼
shell.py: 工具函数，命令行相关
tcprelay.py与udprelay.py: 实现了TCP和UDP转发，虽然是程序核心但是我们不必关心这一部分，我们只需要关心资源分配机制就可以
asyncdns.py: 自己实现的一个异步dns解析器
